[{"/Users/aaron2/Documents/sourcetree/sample-app/src/client/src/index.js":"1","/Users/aaron2/Documents/sourcetree/sample-app/src/client/src/reportWebVitals.js":"2","/Users/aaron2/Documents/sourcetree/sample-app/src/client/src/App.js":"3","/Users/aaron2/Documents/sourcetree/sample-app/src/client/src/CustomEntryCard.js":"4","/Users/aaron2/Documents/sourcetree/sample-app/src/client/src/ResultsCard.js":"5"},{"size":524,"mtime":1610578075574,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1610499765945,"results":"8","hashOfConfig":"7"},{"size":5794,"mtime":1612831841435,"results":"9","hashOfConfig":"7"},{"size":3440,"mtime":1612409344421,"results":"10","hashOfConfig":"7"},{"size":1136,"mtime":1612320438978,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1tvth9r",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"/Users/aaron2/Documents/sourcetree/sample-app/src/client/src/index.js",[],["26","27"],"/Users/aaron2/Documents/sourcetree/sample-app/src/client/src/reportWebVitals.js",[],"/Users/aaron2/Documents/sourcetree/sample-app/src/client/src/App.js",[],"/Users/aaron2/Documents/sourcetree/sample-app/src/client/src/CustomEntryCard.js",["28"],"import React, { Component } from 'react';\nimport { Card, CardBody, CardFooter, CardHeader, Button, Form, FormField, TextInput, Box, Select } from 'grommet';\n\n\n class CustomEntryCard extends Component {\n    state = { \n        value: {\n            id: '',\n            name: '',\n            area: '',\n            type: '',\n            continent: ''\n        }\n    }\n\n    setValue = (value) => {\n        this.setState({value});\n    }\n\n    submitHandler = e => {\n        e.preventDefault();\n        console.log(this.state.value);\n        console.log(JSON.stringify(this.state.value));\n        fetch('http://localhost:5000/locations', {\n            method: 'post',\n            body: JSON.stringify(this.state.value),\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(response => {\n            if (response.status >= 200 && response.status < 300) {\n                console.log(response);\n                return response;\n              } else {\n               console.log('Somthing went wrong');\n              }\n        }).catch(err => err);\n        this.setValue({\n            id: '',\n            name: '',\n            area: '',\n            type: '',\n            continent: ''\n        });\n    }\n\n    render() {\n    const { value } = this.state;\n    return (\n        <Card  height=\"medium\" align=\"center\" width=\"large\" background=\"light-1\">\n            <CardHeader background=\"light-3\" pad=\"medium\">Custom Entry</CardHeader>\n            <CardBody pad=\"medium\">\n                <Form\n                    value={value}\n                    onChange={nextValue => this.setValue(nextValue)}\n                    onReset={() => this.setValue({})}\n                    onSubmit={this.submitHandler}\n                >\n                    <Box direction=\"row\" gap=\"medium\">\n                    <FormField name=\"id\" htmlFor=\"id-input\" label=\"ID\">\n                        <TextInput id=\"id-input-id\" name=\"id\"  />\n                    </FormField> \n                    <FormField name=\"name\" htmlFor=\"name-input\" label=\"Name\">\n                        <TextInput id=\"name-input-id\" name=\"name\" />\n                    </FormField> \n                    <FormField name=\"area\" htmlFor=\"area-input\" label=\"Area (in square mi.)\">\n                        <TextInput id=\"area-input-id\" name=\"area\" />\n                    </FormField>\n                    </Box>\n                    <Box direction=\"row\" gap=\"medium\">\n                    <FormField name=\"type\" htmlFor=\"type-input\" label=\"Type (state or country)\">\n                        <TextInput id=\"type-input-id\" name=\"type\" />\n                    </FormField>\n                    <FormField name=\"continent\" htmlFor=\"continent-input\" label=\"Continent\">\n                        <TextInput id=\"continent-input-id\" name=\"continent\" />\n                    </FormField>\n                    </Box>\n                    <Box direction=\"row\" align=\"center\" gap=\"medium\">\n                        <Button type=\"submit\" primary label=\"Submit\" />\n                        <Button type=\"reset\" label=\"Reset\" />\n                    </Box>\n                </Form>\n            </CardBody>\n            <CardFooter pad={{horizontal: \"small\"}} background=\"light-2\">   \n            </CardFooter>\n        </Card>\n    );\n    }\n}\n\nexport default CustomEntryCard;","/Users/aaron2/Documents/sourcetree/sample-app/src/client/src/ResultsCard.js",["29","30","31","32","33","34"],"import React, { Component } from 'react';\nimport { Card, CardBody, CardFooter, CardHeader, Button, Form, FormField, TextInput, Box, Select, Heading } from 'grommet';\n\n\nclass ResultsCard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            \n        };\n    }\n    \n    render() {\n        return (\n            <div>\n                <Card height=\"medium\" align=\"center\" width=\"large\" background=\"light-1\">\n                    <CardHeader background=\"light-3\" pad=\"medium\">Results</CardHeader>\n                    <CardBody pad=\"medium\">\n                        <Heading background=\"neutral\"> {this.props.entry1.name} could fit into {this.props.entry2.name} {Math.floor(this.props.result)} times!</Heading>\n                        {this.props.decimalBlurb ? <Heading>({Math.round((this.props.result) * 100) /100} times to be exact.)</Heading> : null}\n                    </CardBody>\n                    <CardFooter pad={{horizontal: \"small\"}} background=\"light-2\">   \n                    </CardFooter>\n                </Card>\n\n            </div>\n        );\n    }\n}\n\nexport default ResultsCard;",["35","36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":2,"column":91,"nodeType":"43","messageId":"44","endLine":2,"endColumn":97},{"ruleId":"41","severity":1,"message":"45","line":2,"column":50,"nodeType":"43","messageId":"44","endLine":2,"endColumn":56},{"ruleId":"41","severity":1,"message":"46","line":2,"column":58,"nodeType":"43","messageId":"44","endLine":2,"endColumn":62},{"ruleId":"41","severity":1,"message":"47","line":2,"column":64,"nodeType":"43","messageId":"44","endLine":2,"endColumn":73},{"ruleId":"41","severity":1,"message":"48","line":2,"column":75,"nodeType":"43","messageId":"44","endLine":2,"endColumn":84},{"ruleId":"41","severity":1,"message":"49","line":2,"column":86,"nodeType":"43","messageId":"44","endLine":2,"endColumn":89},{"ruleId":"41","severity":1,"message":"42","line":2,"column":91,"nodeType":"43","messageId":"44","endLine":2,"endColumn":97},{"ruleId":"37","replacedBy":"50"},{"ruleId":"39","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'Select' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Form' is defined but never used.","'FormField' is defined but never used.","'TextInput' is defined but never used.","'Box' is defined but never used.",["52"],["53"],"no-global-assign","no-unsafe-negation"]