{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aaron2/Documents/sourcetree/sample-app/src/client/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Anchor, Nav, Button, Grommet, Header, Box, WorldMap, Main, Heading, Paragraph, Select, Layer, RadioButtonGroup } from 'grommet';\nimport { grommet } from 'grommet/themes';\nimport CustomEntryCard from './CustomEntryCard';\nimport ResultsCard from './ResultsCard';\nimport { MapContainer, TileLayer, Marker, Popup, Map, GeoJSON } from 'react-leaflet';\nimport \"leaflet/dist/leaflet.css\";\nimport mapData from \"./mapdata/countries.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      locationList: [],\n      locationSearchRes: [],\n      entry1: [],\n      entry2: [],\n      setShowResults: false,\n      result: [],\n      showCustomEntry: false,\n      decimalBlurb: false,\n      radioVal: 'mi'\n    };\n    this.countryStyle = {\n      fillColor: \"red\",\n      fillOpacity: 1,\n      color: \"black\",\n      weight: 2\n    };\n\n    this.getResponse = async () => {\n      const response = await fetch('http://localhost:5000/locations');\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      return body;\n    };\n\n    this.onCalculate = () => {\n      if (this.state.entry1.area && this.state.entry2.area) {\n        var temp = this.state.entry2.area / this.state.entry1.area;\n\n        if (temp % 1 !== 0) {\n          this.setState({\n            decimalBlurb: true\n          });\n        }\n      }\n\n      this.setState({\n        result: temp,\n        locationList: this.state.locationSearchRes,\n        showResults: true\n      });\n    };\n\n    this.setShow = x => {\n      this.setState({\n        showCustomEntry: x,\n        showResults: x\n      });\n    };\n\n    this.setRadioValue = value => {\n      this.setState({\n        radioVal: value\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getResponse().then(res => {\n      this.setState({\n        locationList: res,\n        locationSearchRes: res\n      });\n    });\n  }\n\n  render() {\n    const {\n      locationList,\n      locationSearchRes,\n      entry1,\n      entry2,\n      result,\n      radioVal,\n      showCustomEntry,\n      showResults,\n      decimalBlurb\n    } = this.state;\n    const texas = locationList.find(o => o.name === 'Texas');\n    console.log(texas);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Map, {\n          style: {\n            height: \"80vh\"\n          },\n          zoom: 2,\n          center: [20, 100],\n          children: /*#__PURE__*/_jsxDEV(GeoJSON, {\n            style: this.countryStyle,\n            data: mapData.features,\n            onEachFeature: this.onEachCountry\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Grommet, {\n        theme: grommet,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            className: \"App-header\",\n            pad: \"small\",\n            align: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Nav, {\n              direction: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(Anchor, {\n                label: \"Home\",\n                href: \"#\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Anchor, {\n                label: \"Locations\",\n                href: \"#\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(Heading, {\n                direction: \"row\",\n                children: \"HMT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Main, {\n            pad: \"large\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"map-container\",\n              style: {\n                height: '50%'\n              },\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                direction: \"row-responsive\",\n                align: \"center\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              direction: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(Paragraph, {\n                  children: \"How many times could\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(Select, {\n                  options: locationList,\n                  labelKey: \"name\",\n                  valueKey: \"area\",\n                  value: entry1.length < 1 ? texas : entry1,\n                  size: \"xsmall\",\n                  margin: \"small\",\n                  onSearch: searchText => {\n                    const regexp = new RegExp(searchText, 'i');\n                    this.setState({\n                      locationList: locationList.filter(o => o.name.match(regexp))\n                    });\n                  },\n                  onChange: event => this.setState({\n                    entry1: event.value,\n                    locationList: locationSearchRes,\n                    showResults: false,\n                    decimalBlurb: false\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(Paragraph, {\n                  children: \"fit into\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(Select, {\n                  options: locationList,\n                  labelKey: \"name\",\n                  valueKey: \"area\",\n                  value: entry2,\n                  size: \"xsmall\",\n                  margin: \"small\",\n                  onSearch: searchText => {\n                    const regexp = new RegExp(searchText, 'i');\n                    this.setState({\n                      locationList: locationList.filter(o => o.name.match(regexp))\n                    });\n                  },\n                  onChange: ev => this.setState({\n                    entry2: ev.value,\n                    locationList: locationSearchRes,\n                    showResults: false,\n                    decimalBlurb: false\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n                children: \"?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                primary: true,\n                margin: \"small\",\n                size: \"small\",\n                label: \"Calculate\",\n                onClick: this.onCalculate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                primary: true,\n                margin: \"small\",\n                size: \"small\",\n                label: \"Custom Entry\",\n                onClick: () => this.setShow(true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 15\n              }, this), showCustomEntry ? /*#__PURE__*/_jsxDEV(Layer, {\n                onEsc: () => this.setShow(false),\n                onClickOutside: () => this.setShow(false),\n                children: /*#__PURE__*/_jsxDEV(CustomEntryCard, {\n                  children: \" \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 17\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(RadioButtonGroup, {\n              direction: \"row\",\n              align: \"center\",\n              name: \"doc\",\n              options: ['mi', 'km'],\n              value: radioVal,\n              onChange: event => this.setRadioValue(event.target.defaultValue)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 13\n            }, this), showResults ? /*#__PURE__*/_jsxDEV(Layer, {\n              onEsc: () => this.setShow(false),\n              onClickOutside: () => this.setShow(false),\n              children: /*#__PURE__*/_jsxDEV(ResultsCard, {\n                entry1: entry1,\n                entry2: entry2,\n                result: result,\n                decimalBlurb: decimalBlurb\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/aaron2/Documents/sourcetree/sample-app/src/client/src/App.js"],"names":["React","Component","Anchor","Nav","Button","Grommet","Header","Box","WorldMap","Main","Heading","Paragraph","Select","Layer","RadioButtonGroup","grommet","CustomEntryCard","ResultsCard","MapContainer","TileLayer","Marker","Popup","Map","GeoJSON","mapData","App","state","locationList","locationSearchRes","entry1","entry2","setShowResults","result","showCustomEntry","decimalBlurb","radioVal","countryStyle","fillColor","fillOpacity","color","weight","getResponse","response","fetch","body","json","status","Error","message","onCalculate","area","temp","setState","showResults","setShow","x","setRadioValue","value","componentDidMount","then","res","render","texas","find","o","name","console","log","height","features","onEachCountry","length","searchText","regexp","RegExp","filter","match","event","ev","target","defaultValue"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nimport { Anchor, Nav, Button, Grommet, Header, Box, WorldMap, Main, Heading, Paragraph, Select, Layer, RadioButtonGroup } from 'grommet';\nimport { grommet } from 'grommet/themes';\nimport CustomEntryCard from './CustomEntryCard';\nimport ResultsCard from './ResultsCard';\nimport { MapContainer, TileLayer, Marker, Popup, Map, GeoJSON } from 'react-leaflet'\nimport \"leaflet/dist/leaflet.css\";\nimport mapData from \"./mapdata/countries.json\";\n\n\n\nclass App extends Component {\n  state = {\n    locationList: [],\n    locationSearchRes: [],\n    entry1: [],\n    entry2: [],\n    setShowResults: false,\n    result: [],\n    showCustomEntry: false,\n    decimalBlurb: false,\n    radioVal: 'mi'\n  }\n\n  countryStyle = {\n    fillColor: \"red\",\n    fillOpacity: 1,\n    color: \"black\",\n    weight: 2,\n  };\n\n  getResponse = async() => {\n    const response = await fetch('http://localhost:5000/locations');\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n\n    return body;\n  }\n\n  onCalculate = () => {\n    if(this.state.entry1.area && this.state.entry2.area){\n      var temp = this.state.entry2.area / this.state.entry1.area;\n      if(temp % 1 !== 0){\n        this.setState({decimalBlurb: true});\n      }      \n    }\n    this.setState({ result: temp,\n      locationList: this.state.locationSearchRes,\n      showResults: true });\n  }\n\n  setShow = (x) => {\n    this.setState({ showCustomEntry: x, showResults: x })\n  }\n\n  setRadioValue = (value) => {\n    this.setState({radioVal: value});\n  }\n\n  componentDidMount() {\n    this.getResponse()\n      .then(res => {\n        this.setState({ \n        locationList: res,\n        locationSearchRes: res\n        });\n      })\n  }\n\n  render() {\n    const {locationList, locationSearchRes, entry1, entry2, result, radioVal, showCustomEntry, showResults, decimalBlurb} = this.state;\n    const texas = locationList.find(o => o.name === 'Texas');\n    console.log(texas)\n    return (\n      <>\n      <div>\n      <Map style={{ height: \"80vh\" }} zoom={2} center={[20, 100]}>\n                  <GeoJSON \n                    style={this.countryStyle}\n                    data={mapData.features}\n                    onEachFeature={this.onEachCountry} \n                  />\n                </Map>\n      </div>\n      <Grommet theme={grommet}>\n        <div className=\"App\">\n          <Header className=\"App-header\" pad=\"small\" align=\"center\">\n            <Nav direction=\"row\">\n              <Anchor label=\"Home\" href=\"#\" />\n              <Anchor label=\"Locations\" href=\"#\" />\n            </Nav>\n            <Box>\n              <Heading direction=\"row\">HMT</Heading>\n            </Box>\n          </Header>\n          \n          <Main pad=\"large\">\n            <div className=\"map-container\" style={{height: '50%'}}>\n              <Box direction=\"row-responsive\" align=\"center\">\n                {/* <WorldMap color=\"graph-1\" margin=\"small\" align=\"center\"/> */}\n                \n              </Box>\n            </div>\n            <Box direction=\"row\">\n              <div>\n                <Paragraph>How many times could</Paragraph>\n              </div>\n              <div>\n                <Select\n                  options={locationList}\n                  labelKey=\"name\"\n                  valueKey=\"area\"\n                  value={entry1.length < 1 ? texas : entry1}\n                  size=\"xsmall\"\n                  margin=\"small\"\n                  onSearch={(searchText) => {\n                    const regexp = new RegExp(searchText, 'i');\n                    this.setState({ locationList: locationList.filter(o => o.name.match(regexp)) });\n                  }}\n                  onChange={event => this.setState({\n                    entry1: event.value,\n                    locationList: locationSearchRes,\n                    showResults: false,\n                    decimalBlurb: false\n                  })}\n                />\n              </div>\n              <div>\n                <Paragraph>fit into</Paragraph>\n              </div>\n              <div>\n                <Select\n                  options={locationList}\n                  labelKey=\"name\"\n                  valueKey=\"area\"\n                  value={entry2}\n                  size=\"xsmall\"\n                  margin=\"small\"\n                  onSearch={(searchText) => {\n                    const regexp = new RegExp(searchText, 'i');\n                    this.setState({ locationList: locationList.filter(o => o.name.match(regexp)) });\n                  }}\n                  onChange={ev => this.setState({\n                    entry2: ev.value,\n                    locationList: locationSearchRes,\n                    showResults: false,\n                    decimalBlurb: false\n                  })}\n                />\n              </div>\n              \n              <Paragraph>?</Paragraph>\n              <Button primary margin=\"small\" size=\"small\" label=\"Calculate\" onClick={this.onCalculate} />\n              <Button primary margin=\"small\" size=\"small\" label=\"Custom Entry\" onClick={() => this.setShow(true)} />\n              {showCustomEntry ? \n                <Layer\n                    onEsc={() => this.setShow(false)}\n                    onClickOutside={() => this.setShow(false)}\n                >\n                    <CustomEntryCard> </CustomEntryCard>\n                  </Layer>\n                  : null\n                }\n            </Box>\n            <RadioButtonGroup\n              direction=\"row\"\n              align=\"center\"\n              name=\"doc\"\n              options={['mi', 'km']}\n              value={radioVal}\n              onChange={(event) => this.setRadioValue(event.target.defaultValue)}\n            />\n            \n            { showResults ? \n              <Layer\n                onEsc={() => this.setShow(false)}\n                onClickOutside={() => this.setShow(false)}\n              >\n                <ResultsCard entry1={entry1} entry2={entry2} result={result} decimalBlurb={decimalBlurb}></ResultsCard>\n              </Layer>\n              : null }\n            \n          </Main>\n        </div>\n      </Grommet>\n      </>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}